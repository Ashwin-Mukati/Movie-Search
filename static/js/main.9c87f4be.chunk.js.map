{"version":3,"sources":["Contexts/index.js","MovieData/MetaData.js","MovieData/index.js","Search/SearchList.js","Search/index.js","App.js","serviceWorker.js","index.js"],"names":["SearchContext","React","createContext","MovieContext","MetaData","_useContext","useContext","Poster","Title","Type","Year","react_default","a","createElement","src","alt","className","MovieData","MovieData_MetaData","SearchList","results","handleMovieSelected","map","item","i","key","onClick","SearchBar","title","searching","handleSearchChange","type","name","value","onChange","e","target","Search_SearchList","App","_useState","useState","_useState2","Object","slicedToArray","searchValue","setSearchValue","_useState3","_useState4","setResults","_useState5","_useState6","movieSelected","setMovieSelected","_useState7","_useState8","setSearching","_handleSearchChange","asyncToGenerator","regenerator_default","mark","_callee","inputValue","response","data","wrap","_context","prev","next","fetch","concat","sent","json","Search","stop","apply","this","arguments","searchContextValue","_x","console","log","Provider","src_Search","src_MovieData","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c87f4be.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport let SearchContext = React.createContext({}) ;\r\nexport const MovieContext = React.createContext({});\r\n\r\n\r\n\r\n","import React from \"react\";\nimport \"./index.css\";\nimport {useContext} from 'react';\nimport {MovieContext} from '../Contexts'\nfunction MetaData() {\n  const {Poster,Title,Type,Year} = useContext(MovieContext);\n  return <div>\n    <img src={Poster} alt=\"movie-poster\"/>\n    <h2 className='movie-info' >{Title}</h2>\n    <div className=\"movie-info\">\n      <div className=\"info-section\">\n        <label>Type:</label>\n        <span>{Type}</span>\n      </div>\n      <div className=\"info-section\">\n        <label>Year:</label>\n        <span>{Year}</span>\n      </div>\n    </div>\n  </div>\n}\n\nexport default MetaData;\n","import React from \"react\";\nimport \"./index.css\";\nimport {useContext} from 'react';\nimport {MovieContext} from '../Contexts'\nimport MetaData from \"./MetaData\";\nfunction MovieData() {\n  const value = useContext(MovieContext);\n  return value ? <div><MetaData/></div> : <h2>Please select a movie</h2>\n}\n\nexport default MovieData;\n","import React from \"react\";\nimport \"./index.css\";\nimport {SearchContext} from '../Contexts';\nimport {useContext} from 'react'\nconst SearchList = () => {\n  let {results,handleMovieSelected} = useContext(SearchContext)\n  return (\n    <ul className=\"results\">\n      {\n        results.map((item,i)=>{\n        return (\n        <li key={i} onClick={()=>handleMovieSelected(item)} >\n          <img src={item.Poster} alt=\"poster\" />\n          {item.Title}\n        </li>\n        )\n        })\n      }\n    </ul>\n  );\n};\n\nexport default SearchList;\n","import React from \"react\";\nimport \"./index.css\";\nimport {useContext} from 'react';\nimport {SearchContext} from '../Contexts/index'\nimport SearchList from \"./SearchList\";\nconst SearchBar = () => {\n  let {title,searching,handleSearchChange} = useContext(SearchContext);\n  return (\n    <div className=\"search\">\n      <input \n        type=\"text\" \n        name=\"movie-search\"\n        value = {title} \n        onChange = {(e)=>handleSearchChange(e.target.value)}\n      />\n      {title !== \"\" && searching && <SearchList/>}\n    </div>\n  )\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport MovieData from './MovieData';\nimport \"./App.css\";\nimport {SearchContext,MovieContext} from './Contexts/index'\nimport SearchBar from './Search/index';\nimport {useState} from 'react'\nfunction App() {\n  let [searchValue,setSearchValue] = useState('');\n  let [results,setResults] = useState([]);\n  let [movieSelected,setMovieSelected] = useState(null);\n  let [searching,setSearching] = useState(false);\n  async function handleSearchChange(inputValue){\n    setSearchValue(inputValue);\n    const response = await fetch(`http://www.omdbapi.com/?apikey=6cf73f27&s=${inputValue}`);\n    let data = await response.json();\n    setResults(data.Search || []);\n    setSearching(true)\n  }\n  \n  function handleMovieSelected(movieSelected){\n    console.log(movieSelected);\n    setMovieSelected(movieSelected);\n    setSearching(false)\n  } \n  const searchContextValue = {\n    handleSearchChange,\n    title : searchValue,\n    results : results,\n    handleMovieSelected,\n    searching : searching\n  }\n  return (\n    <div className=\"App\">\n      <SearchContext.Provider value={searchContextValue} >\n        <SearchBar/> \n      </SearchContext.Provider>\n      <MovieContext.Provider value={movieSelected} >\n        <MovieData/>\n      </MovieContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}